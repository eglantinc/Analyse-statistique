        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#ifndef TESTING
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:#include <ctype.h>
        -:    6:#include <errno.h>
        -:    7:#include <unistd.h>
        -:    8:#include <stdbool.h>
        -:    9:#include "main.h"
        -:   10:#include "listechainee.h"
        -:   11:#include "statistiques.h"
        -:   12:
        1:   13:void print_usage(void) {
        1:   14:    fprintf(stderr, USAGE, "tri", "tri");
        1:   15:}
        -:   16:
        1:   17:void validate_argc(int argc) {
        1:   18:    if (argc != 2 && argc != 4) {
        1:   19:        fprintf(stderr, "Ce programme prends soit 2 arguments, soit 4 arguments.\n");
        1:   20:        print_usage();
        1:   21:        exit(EXIT_FAILURE);
        -:   22:    }
        -:   23:
    #####:   24:}
        -:   25:
    #####:   26:void print_fopen_error(FILE *file) {
    #####:   27:    if (file == NULL) {
    #####:   28:         perror("Erreur lors de l'ouverture du fichier.\n");
    #####:   29:         fprintf(stderr, "Erreur: %s\n", strerror(errno));
    #####:   30:         exit(EXIT_FAILURE);
        -:   31:     }
    #####:   32:}
        -:   33:
    #####:   34:void validate_letters_in_word(char char_in_word) {
        -:   35:
    #####:   36:    if (!isalpha(char_in_word) || !isupper(char_in_word)) {
    #####:   37:        fprintf(stderr, "Erreur, tous les mots du fichiers doivent " 
        -:   38:                "être des lettres majuscules sans caractères accentués\n");
    #####:   39:          exit(EXIT_FAILURE);
        -:   40:    }
    #####:   41:}
        -:   42:
    #####:   43:FILE *validate_input_file(char **argv) {
    #####:   44:    FILE *file = fopen(argv[1], "r");
    #####:   45:    print_fopen_error(file);
    #####:   46:    return file;
        -:   47:}
        -:   48:
    #####:   49:FILE *validate_output_file(char **argv) {
    #####:   50:    FILE *file = fopen(argv[3], "w");
    #####:   51:    print_fopen_error(file);
    #####:   52:    return file;
        -:   53:}
        -:   54:
    #####:   55:void validate_argv(int argc, char **argv) {
    #####:   56:    if (argc == 4) {
    #####:   57:        if (strcmp(argv[2], "-S") != 0) {
    #####:   58:            fprintf(stderr, "Option non reconnue : %s\n", argv[2]);
    #####:   59:            print_usage();
    #####:   60:            exit(EXIT_FAILURE);
        -:   61:        }
    #####:   62:    } 
    #####:   63:}
        -:   64:
    #####:   65:void insert_word_from_file(FILE *file, LinkedList *word_list) {
        -:   66:    char line[MAX_CHAR + 1];
        -:   67:    char line_copy[MAX_CHAR + 1];
    #####:   68:    while (fgets(line, sizeof(line),file)) {
    #####:   69:        strcpy(line_copy, line);  
    #####:   70:        char *word = strtok(line_copy, " \n"); 
    #####:   71:        while (word != NULL) {
    #####:   72:            for (int i = 0; word[i] != '\0'; i++) {
    #####:   73:                validate_letters_in_word(word[i]);
    #####:   74:            } 
    #####:   75:            insert_in_order(word_list, word);
    #####:   76:            word = strtok(NULL, " \n"); 
        -:   77:        }
        -:   78:    }
    #####:   79:}
        -:   80:
        1:   81:int main (int argc, char **argv) { 
        1:   82:    LinkedList word_list = {NULL, NULL, 0};
        -:   83:    
        1:   84:    validate_argc(argc);
        1:   85:    validate_argv(argc, argv);
        -:   86:    
        1:   87:    FILE *input_file = validate_input_file(argv);
        1:   88:    FILE *output_file = validate_output_file(argv);
        -:   89:    
        1:   90:    insert_word_from_file(input_file, &word_list);
        -:   91:
        1:   92:    fprintf(output_file, "Nombre de mots avec dupplication: %d\n", word_list.word_count);
        1:   93:    delete_duplicate(&word_list);
        1:   94:    fseek(input_file, 0, SEEK_SET);
        1:   95:    fprintf(output_file, "Nombre de mots sans dupplication: %d\n", word_list.word_count);
        1:   96:    fprintf(output_file, "Nombre de lignes dans le fichier: %d\n", count_lines(input_file));
        1:   97:    fprintf(output_file, "Nombre de lettres distinctes dans la liste: %d\n", distinct_letter_count(&word_list));
        1:   98:    fprintf(output_file, "La lettre la plus fréquente: %c\n", find_most_repeated_letter(&word_list));
        1:   99:    fclose(output_file);
        1:  100:    fclose(input_file);
        -:  101:    
        1:  102:    print_list(&word_list);
        -:  103:     
        1:  104:    return 0;
        -:  105:}
        -:  106:#endif
