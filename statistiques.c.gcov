        -:    0:Source:statistiques.c
        -:    0:Graph:statistiques.gcno
        -:    0:Data:statistiques.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <ctype.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <stdbool.h>
        -:    5:#include "statistiques.h"
        -:    6:#include "main.h"
        -:    7:
    #####:    8:bool is_empty_line(const char *line) {
    #####:    9:    for (unsigned int i = 0; line[i] != '\0'; i++) {
    #####:   10:        if (!isspace(line[i])) {
    #####:   11:            return false;
        -:   12:        }
    #####:   13:    }
    #####:   14:    return true;
    #####:   15:}
        -:   16:
    #####:   17:int count_lines(FILE *file) {
    #####:   18:    int number_of_lines = 0;
        -:   19:    char line[MAX_CHAR + 1];
    #####:   20:    while (fgets(line, sizeof(line),file)) {
    #####:   21:        if (!is_empty_line(line)) {
    #####:   22:            number_of_lines++;
    #####:   23:        }
        -:   24:    }
    #####:   25:    return number_of_lines;
        -:   26:}
        -:   27:
    #####:   28:int distinct_letter_count(LinkedList *word_list) {
    #####:   29:    bool is_seen[26] = {false};
    #####:   30:    int letter_count = 0;
        -:   31:
    #####:   32:    Node *current = word_list->head;
        -:   33:
    #####:   34:    while (current != NULL) {
    #####:   35:        for (int i = 0; current->word[i]!= '\0'; i++) {
    #####:   36:            char letter = current->word[i];
        -:   37:            // Trouver l'indice de la lettre qu'on cherche
    #####:   38:            int letter_index = letter - 'A';
    #####:   39:            if (!is_seen[letter_index]) {
    #####:   40:                is_seen[letter_index] = true;
    #####:   41:                letter_count++;
    #####:   42:            } 
    #####:   43:        }
    #####:   44:        current = current->next;   
        -:   45:   }
    #####:   46:   return letter_count;
        -:   47:}
        -:   48:
        -:   49:
    #####:   50:char find_most_repeated_letter(LinkedList *word_list) {
    #####:   51:    int max_letter_occurence = 0;   
    #####:   52:    char most_repeated_letter = '\0';      
        -:   53:
    #####:   54:    if (word_list->word_count == 0) {  
    #####:   55:        return most_repeated_letter;
        -:   56:    }
        -:   57:    
    #####:   58:    Node *current = word_list->head;  
    #####:   59:    int count_occurence[26] = {0};           
        -:   60:
    #####:   61:    while (current != NULL) {      
    #####:   62:        for (int i = 0; current->word[i] != '\0'; i++) {  
    #####:   63:            char letter = current->word[i];
    #####:   64:            int letter_index = letter - 'A'; 
    #####:   65:            count_occurence[letter_index]++;  
        -:   66:
    #####:   67:            if (count_occurence[letter_index] > max_letter_occurence) { 
    #####:   68:                max_letter_occurence = count_occurence[letter_index];
    #####:   69:                most_repeated_letter = letter;
    #####:   70:            }
    #####:   71:        }
    #####:   72:        current = current->next; 
        -:   73:    }
    #####:   74:    return most_repeated_letter; 
    #####:   75:}
        -:   76:
        -:   77:
