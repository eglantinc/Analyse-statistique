        -:    0:Source:statistiques.c
        -:    0:Graph:statistiques.gcno
        -:    0:Data:statistiques.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <ctype.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <stdbool.h>
        -:    5:#include "statistiques.h"
        -:    6:#include "main.h"
        -:    7:
       29:    8:bool is_empty_line(const char *line) {
       85:    9:    for (unsigned int i = 0; line[i] != '\0'; i++) {
       82:   10:        if (!isspace(line[i])) {
       26:   11:            return false;
        -:   12:        }
       56:   13:    }
        3:   14:    return true;
       29:   15:}
        -:   16:
        1:   17:int count_lines(FILE *file) {
        1:   18:    int number_of_lines = 0;
        -:   19:    char line[MAX_CHAR + 1];
       25:   20:    while (fgets(line, sizeof(line),file)) {
       24:   21:        if (!is_empty_line(line)) {
       24:   22:            number_of_lines++;
       24:   23:        }
        -:   24:    }
        1:   25:    return number_of_lines;
        -:   26:}
        -:   27:
        1:   28:int distinct_letter_count(LinkedList *word_list) {
        1:   29:    bool is_seen[26] = {false};
        1:   30:    int letter_count = 0;
        -:   31:
        1:   32:    Node *current = word_list->head;
        -:   33:
        6:   34:    while (current != NULL) {
       29:   35:        for (int i = 0; current->word[i]!= '\0'; i++) {
       24:   36:            char letter = current->word[i];
        -:   37:            // Trouver l'indice de la lettre qu'on cherche
       24:   38:            int letter_index = letter - 'A';
       24:   39:            if (!is_seen[letter_index]) {
       14:   40:                is_seen[letter_index] = true;
       14:   41:                letter_count++;
       14:   42:            } 
       24:   43:        }
        5:   44:        current = current->next;   
        -:   45:   }
        1:   46:   return letter_count;
        -:   47:}
        -:   48:
        -:   49:
        2:   50:char find_most_repeated_letter(LinkedList *word_list) {
        2:   51:    int max_letter_occurence = 0;   
        2:   52:    char most_repeated_letter = '\0';      
        -:   53:
        2:   54:    if (word_list->word_count == 0) {  
        1:   55:        return most_repeated_letter;
        -:   56:    }
        -:   57:    
        1:   58:    Node *current = word_list->head;  
        1:   59:    int count_occurence[26] = {0};           
        -:   60:
        6:   61:    while (current != NULL) {      
       29:   62:        for (int i = 0; current->word[i] != '\0'; i++) {  
       24:   63:            char letter = current->word[i];
       24:   64:            int letter_index = letter - 'A'; 
       24:   65:            count_occurence[letter_index]++;  
        -:   66:
       24:   67:            if (count_occurence[letter_index] > max_letter_occurence) { 
        4:   68:                max_letter_occurence = count_occurence[letter_index];
        4:   69:                most_repeated_letter = letter;
        4:   70:            }
       24:   71:        }
        5:   72:        current = current->next; 
        -:   73:    }
        1:   74:    return most_repeated_letter; 
        2:   75:}
        -:   76:
        -:   77:
