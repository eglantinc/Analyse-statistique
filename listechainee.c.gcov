        -:    0:Source:listechainee.c
        -:    0:Graph:listechainee.gcno
        -:    0:Data:listechainee.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:#include "listechainee.h"
        -:    5:
        5:    6:void initialize_list(LinkedList *word_list) {
        5:    7:    word_list->head = NULL;
        5:    8:    word_list->tail = NULL;
        5:    9:    word_list->word_count = 0;
        5:   10:}
        -:   11:
        -:   12:
        1:   13:void print_empty_list_message(const LinkedList *word_list) {
        1:   14:    if (word_list->word_count == 0) {
    #####:   15:        printf("La liste de mots est vide\n");
    #####:   16:        return;
        -:   17:    }
        1:   18:}
        -:   19:
        1:   20:void delete_duplicate(LinkedList *word_list) {
        1:   21:    print_empty_list_message(word_list);
        1:   22:    Node *current = word_list->head;
        7:   23:    while (current != NULL && current->next != NULL) {
        6:   24:        if (strcmp(current->word, current->next->word) == 0) {
        -:   25:            
        2:   26:            Node *duplicate = current->next;
        2:   27:            current->next = duplicate->next;
        2:   28:            word_list->word_count--;
        -:   29:            
        2:   30:            free(duplicate->word);
        2:   31:            free(duplicate);
        -:   32:
        2:   33:            if (current->next == NULL) {
    #####:   34:                word_list->tail = current;
    #####:   35:            }
        2:   36:        } else {
        4:   37:            current = current->next;
        -:   38:        }
        -:   39:    }
        1:   40:}
        -:   41:
        3:   42:void free_word_list(LinkedList *word_list) {
        3:   43:    Node *current = word_list->head;
        -:   44:    Node *next;
        -:   45:
       16:   46:    while (current != NULL) {
       13:   47:        next = current->next;
       13:   48:        free(current->word); 
       13:   49:        free(current);
       13:   50:        current = next;
       13:   51:        word_list->word_count--;
        -:   52:    }
        3:   53:    word_list->head = NULL;
        3:   54:    word_list->tail = NULL;
        3:   55:}
        -:   56:
    #####:   57:void print_list(const LinkedList *word_list) {
    #####:   58:    print_empty_list_message(word_list);
    #####:   59:    Node *current = word_list->head;;
        -:   60:
    #####:   61:    while (current != NULL) {
    #####:   62:        printf("%s\n", current->word);
    #####:   63:        current = current->next;
        -:   64:    }
    #####:   65:}
        -:   66:
       16:   67:struct Node* create_node(const char *new_word) {
       16:   68:    struct Node* new_node = (struct Node*)malloc(sizeof(Node));
        -:   69:    
       16:   70:    if (new_node == NULL) {
    #####:   71:        perror("Erreur d'allocation de mémoire pour le nœud");
    #####:   72:        exit(EXIT_FAILURE);
        -:   73:    }
        -:   74:
       16:   75:    new_node->word = (char*)malloc(strlen(new_word) + 1);
        -:   76:    
       16:   77:    if (new_node->word == NULL) {
    #####:   78:        perror("Erreur d'allocation de mémoire pour le mot");
    #####:   79:        free(new_node);
    #####:   80:        exit(EXIT_FAILURE);
        -:   81:    }
        -:   82:
       16:   83:    strcpy(new_node->word, new_word);
       16:   84:    new_node->next = NULL;
        -:   85:
       16:   86:    return new_node;
        -:   87:}
        -:   88:
        -:   89:
        4:   90:void insert_into_empty_list(LinkedList *word_list, Node *new_node) {
        4:   91:    word_list->head = new_node;
        4:   92:    word_list->tail = new_node;
        4:   93:    word_list->word_count++;
        4:   94:}
        -:   95:
       15:   96:void insert_in_order(LinkedList *word_list, const char *new_word) {
       15:   97:    Node *new_node = create_node(new_word);
        -:   98:
       15:   99:    if (word_list->word_count == 0) {
        3:  100:        insert_into_empty_list(word_list, new_node);
        3:  101:        return;
        -:  102:    }
       12:  103:    Node *current = word_list->head;
       12:  104:    Node *previous = NULL;
        -:  105:
       30:  106:    while (current != NULL && strcmp(current->word, new_node->word) <= 0) {
       18:  107:        previous = current;
       18:  108:        current = current->next;
        -:  109:    }
        -:  110:
       12:  111:    if (previous == NULL) {
        3:  112:        new_node->next = word_list->head;
        3:  113:        word_list->head = new_node;
        3:  114:    } else {
        9:  115:        previous->next = new_node;
        9:  116:        new_node->next = current;
        -:  117:
        9:  118:        if (current == NULL) {
        3:  119:            word_list->tail = new_node;
        3:  120:        }
        -:  121:    }
        -:  122:
       12:  123:    word_list->word_count++;
       15:  124:}
        -:  125:
        -:  126:
