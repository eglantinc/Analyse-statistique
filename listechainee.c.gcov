        -:    0:Source:listechainee.c
        -:    0:Graph:listechainee.gcno
        -:    0:Data:listechainee.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <string.h>
        -:    3:#include <stdio.h>
        -:    4:#include <ctype.h>
        -:    5:#include "helper.h"
        -:    6:#include "listechainee.h"
        -:    7:#include "main.h"
        -:    8:
        8:    9:void initialize_list(LinkedList *word_list) {
        8:   10:    word_list->head = NULL;
        8:   11:    word_list->tail = NULL;
        8:   12:    word_list->word_count = 0;
        8:   13:}
        -:   14:
        -:   15:
        2:   16:void print_empty_list_message(const LinkedList *word_list) {
        2:   17:    if (word_list->word_count == 0) {
    #####:   18:        printf("La liste de mots est vide\n");
    #####:   19:        return;
        -:   20:    }
        2:   21:}
        -:   22:
        2:   23:void delete_duplicate(LinkedList *word_list) {
        2:   24:    print_empty_list_message(word_list);
        2:   25:    Node *current = word_list->head;
      127:   26:    while (current != NULL && current->next != NULL) {
      125:   27:        if (strcmp(current->word, current->next->word) == 0) {
        -:   28:            
      117:   29:            Node *duplicate = current->next;
      117:   30:            current->next = duplicate->next;
      117:   31:            word_list->word_count--;
        -:   32:            
      117:   33:            free(duplicate->word);
      117:   34:            free(duplicate);
        -:   35:
      117:   36:            if (current->next == NULL) {
        1:   37:                word_list->tail = current;
        1:   38:            }
      117:   39:        } else {
        8:   40:            current = current->next;
        -:   41:        }
        -:   42:    }
        2:   43:}
        -:   44:
        4:   45:void free_word_list(LinkedList *word_list) {
        4:   46:    Node *current = word_list->head;
        -:   47:    Node *next;
        -:   48:
       22:   49:    while (current != NULL) {
       18:   50:        next = current->next;
       18:   51:        free(current->word); 
       18:   52:        free(current);
       18:   53:        current = next;
       18:   54:        word_list->word_count--;
        -:   55:    }
        4:   56:    word_list->head = NULL;
        4:   57:}
        -:   58:
    #####:   59:void print_list(const LinkedList *word_list) {
    #####:   60:    print_empty_list_message(word_list);
    #####:   61:    Node *current = word_list->head;;
        -:   62:
    #####:   63:    while (current != NULL) {
    #####:   64:        printf("%s\n", current->word);
    #####:   65:        current = current->next;
        -:   66:    }
    #####:   67:}
        -:   68:
      146:   69:struct Node* create_node(const char *new_word) {
      146:   70:    struct Node* new_node = (struct Node*)malloc(sizeof(Node));
        -:   71:    
      146:   72:    if (new_node == NULL) {
    #####:   73:        perror("Erreur d'allocation de mémoire pour le nœud");
    #####:   74:        exit(EXIT_FAILURE);
        -:   75:    }
        -:   76:
      146:   77:    new_node->word = (char*)malloc(strlen(new_word) + 1);
        -:   78:    
      146:   79:    if (new_node->word == NULL) {
    #####:   80:        perror("Erreur d'allocation de mémoire pour le mot");
    #####:   81:        free(new_node);
    #####:   82:        exit(EXIT_FAILURE);
        -:   83:    }
        -:   84:
      146:   85:    strcpy(new_node->word, new_word);
      146:   86:    new_node->next = NULL;
        -:   87:
      146:   88:    return new_node;
        -:   89:}
        -:   90:
        -:   91:
        7:   92:void insert_into_empty_list(LinkedList *word_list, Node *new_node) {
        7:   93:    word_list->head = new_node;
        7:   94:    word_list->tail = new_node;
        7:   95:    word_list->word_count++;
        7:   96:}
        -:   97:
      145:   98:void insert_in_order(LinkedList *word_list, const char *new_word) {
      145:   99:    Node *new_node = create_node(new_word);
        -:  100:
      145:  101:    if (word_list->word_count == 0) {
        6:  102:        insert_into_empty_list(word_list, new_node);
        6:  103:        return;
        -:  104:    }
      139:  105:    Node *current = word_list->head;
      139:  106:    Node *previous = NULL;
        -:  107:
     4557:  108:    while (current != NULL && strcmp(current->word, new_node->word) <= 0) {
     4418:  109:        previous = current;
     4418:  110:        current = current->next;
        -:  111:    }
        -:  112:
      139:  113:    if (previous == NULL) {
        3:  114:        new_node->next = word_list->head;
        3:  115:        word_list->head = new_node;
        3:  116:    } else {
      136:  117:        previous->next = new_node;
      136:  118:        new_node->next = current;
        -:  119:
      136:  120:        if (current == NULL) {
       38:  121:            word_list->tail = new_node;
       38:  122:        }
        -:  123:    }
        -:  124:
      139:  125:    word_list->word_count++;
      145:  126:}
        -:  127:
        -:  128:
        1:  129:void insert_word_from_file(FILE *file, LinkedList *word_list) {
        -:  130:    char line[MAX_CHAR + 1];
        -:  131:    char line_copy[MAX_CHAR + 1];
       25:  132:    while (fgets(line, sizeof(line),file)) {
       24:  133:        strcpy(line_copy, line);
       24:  134:        char *word = strtok(line_copy, " \n");
      144:  135:        while (word != NULL) {
      912:  136:            for (int i = 0; word[i] != '\0'; i++) {
      792:  137:                validate_letters_in_word(word[i]);
      792:  138:            }
      120:  139:            insert_in_order(word_list, word);
      120:  140:            word = strtok(NULL, " \n");
        -:  141:        }
        -:  142:    }
        1:  143:}
        -:  144:
        -:  145:
